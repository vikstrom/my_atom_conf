{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":66,"width":1366,"height":702,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{"/home/victor/Documents/Elektro/Inbyggda system/c_programmering/modul4/uppg1":"source.c"}},"project":{"paths":["/home/victor/Documents/Elektro/Inbyggda system/c_programmering/modul4/modul4_uppg1","/home/victor/Documents/Elektro/Inbyggda system/c_programmering/modul3/uppg1/modul3_uppg1"],"buffers":[{"text":"/**===========================================================================\nName:           main.c\nAuthor:         Victor Vikström\nCompile with:   GCC 4.9.2\nDate:           2015-12-15\nVersion:        1\nDescription:    This program will test a function that is able to shift\n                two integers with each other. The result will be printed\n                out.\n\nUppgift: Skriv en funktion som växlar värdena mellan två heltalsvariabler.\nSkriv ett program som demonstrerar funktionen.\nFunktionen ska ha returtypen void.\n===========================================================================**/\n#include <stdio.h>  //printf\n\n//Print two values seperated by a tab.\nvoid print_values(int *value_1, int *value_2)\n{\n    printf(\"value_1: %d \",*value_1);\n    printf(\"%c\",9 );    //Horizontal tab looks nicer.\n    printf(\"value_2: %d \\n\",*value_2 );\n}\n\n//Shift two values between ech other\nvoid shift_values(int *value_1, int *value_2)\n{\n    int buffer; //Intermediate storage\n    buffer = *value_2;\n    *value_2 = *value_1;\n    *value_1 = buffer;\n}\n\nint main(void)\n{\n    int value_1 = 0;\n    int value_2 = 10;\n    int i;\n\n    //Count through a few numbers to show the functionallity\n    for(i = 0; i < 10; i++)\n    {\n        value_1++;\n        value_2--;\n        printf(\"%s%c\",\"Original: \", 9); //Horizontal tab is nice\n        print_values(&value_1, &value_2);\n        shift_values(&value_1, &value_2);\n        printf(\"%s%c\",\"Shifted:  \", 9); //Horizontal tab is nice\n        print_values(&value_1, &value_2);\n        printf(\"%s\\n\",\"\");\n        shift_values(&value_1, &value_2);   //Shift values back before inc & dec.\n    }\n    return 0;\n}\n","markerStore":{"nextMarkerId":7,"markersById":{"0":{"range":{"start":{"row":21,"column":39},"end":{"row":21,"column":39}},"properties":{"type":"selection","editorId":267,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":8,"undoStack":[],"redoStack":[{"type":"group-end","snapshot":{"0":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":267,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[0,0],[0,1]],"newRange":[[0,0],[0,0]],"oldText":"/","newText":""}},{"type":"change","content":{"oldRange":[[0,1],[0,2]],"newRange":[[0,1],[0,1]],"oldText":"*","newText":""}},{"type":"group-start","snapshot":{"0":{"range":[[0,2],[0,2]],"properties":{"type":"selection","editorId":267,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-end","snapshot":{"0":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":267,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[0,0],[0,1]],"newRange":[[0,0],[0,0]],"oldText":"k","newText":""}},{"type":"group-start","snapshot":{"0":{"range":[[0,1],[0,1]],"properties":{"type":"selection","editorId":267,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-end","snapshot":{"0":{"range":[[0,1],[0,1]],"properties":{"type":"selection","editorId":267,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,1]],"oldText":"","newText":"k"}},{"type":"group-start","snapshot":{"0":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":267},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}}]},"encoding":"utf8","filePath":"/home/victor/Documents/Elektro/Inbyggda system/c_programmering/modul4/modul4_uppg1/main.c","digestWhenLastPersisted":"e482e2813b8b3281397cccbb26e7f1953ff1f325","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":266,"items":[{"id":267,"softTabs":true,"displayBuffer":{"id":268,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/victor/Documents/Elektro/Inbyggda system/c_programmering/modul4/modul4_uppg1/main.c","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/home/victor/Documents/Elektro/Inbyggda system/c_programmering/modul4/modul4_uppg1/main.c","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":266,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-c","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"linter":{"scope":"File"},"fuzzy-finder":{"/home/victor/Documents/Elektro/Inbyggda system/c_programmering/modul4/modul4_uppg1/main.c":1450219841101},"keybinding-resolver":{},"metrics":{"sessionLength":282943},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/home/victor/Documents/Elektro/Inbyggda system/c_programmering/modul4/modul4_uppg1":{"isExpanded":true,"entries":{}},"/home/victor/Documents/Elektro/Inbyggda system/c_programmering/modul3/uppg1/modul3_uppg1":{"isExpanded":false,"entries":{}}},"selectedPath":"/home/victor/Documents/Elektro/Inbyggda system/c_programmering/modul4/modul4_uppg1/main.c","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":190},"find-and-replace":{"findOptions":{"findPattern":"","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":[],"replaceHistory":[],"pathsHistory":[]}}}