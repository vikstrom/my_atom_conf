"use babel";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = {
  config: {
    execPath: {
      title: "GCC Executable Path",
      description: "Note for Windows/Mac OSX users: please ensure that GCC is in your ```$PATH``` otherwise the linter might not work. If your path contains spaces, it needs to be enclosed in double quotes.",
      type: "string",
      "default": "/usr/bin/g++"
    },
    gccIncludePaths: {
      title: "GCC Include Paths",
      description: "Enter your include paths as a comma-separated list. Paths starting with ```.``` or ```..``` are expanded relative to the project root/file path. If any of your paths contain spaces, they need to be enclosed in double quotes.",
      type: "string",
      "default": " "
    },
    gccSuppressWarnings: {
      title: "Suppress GCC Warnings",
      type: "boolean",
      "default": false
    },
    gccDefaultCFlags: {
      title: "C Flags",
      type: "string",
      "default": "-Wall"
    },
    gccDefaultCppFlags: {
      title: "C++ Flags",
      type: "string",
      "default": "-Wall -std=c++11"
    },
    gccErrorLimit: {
      title: "GCC Error Limit",
      type: "integer",
      "default": 0
    }
  },

  activate: function activate() {
    if (!atom.packages.getLoadedPackages("linter")) {
      atom.notifications.addError("Linter package not found.", {
        detail: "Please install the `linter` package in your Settings view."
      });
    }
    require("atom-package-deps").install("linter-gcc");
  },

  provideLinter: function provideLinter() {
    var helpers = require("atom-linter");
    var regex = "(?<file>.+):(?<line>\\d+):(?<col>\\d+):\\s*\\w*\\s*(?<type>(error|warning|note)):\\s*(?<message>.*)";

    // Read configuration data from JSON file .gcc-config.json
    // in project root
    return {
      name: "GCC",
      grammarScopes: ["source.c", "source.cpp"],
      scope: "file",
      lintOnFly: false,
      lint: function lint(activeEditor) {
        config = require("./config");
        var path = require('path');
        settings = config.settings();
        var file = activeEditor.getPath();
        var cwd = atom.project.getPaths()[0];
        if (!cwd) {
          editor = atom.workspace.getActivePaneItem();
          if (editor) {
            file = editor.buffer.file;
            if (file) {
              cwd = file.getParent().getPath();
            }
          }
        }
        command = settings.execPath;

        // Expand path if necessary
        if (command.substring(0, 1) == ".") {
          command = path.join(cwd, command);
        }

        args = [];

        if (activeEditor.getGrammar().name === "C++") {
          s = settings.gccDefaultCppFlags;
          tempargs = s.split(" ");
          args = args.concat(tempargs);
        } else if (activeEditor.getGrammar().name === "C") {
          s = settings.gccDefaultCFlags;
          tempargs = s.split(" ");
          args = args.concat(tempargs);
        }

        args.push("-fmax-errors=" + settings.gccErrorLimit);
        if (settings.gccSuppressWarnings) {
          args.push("-w");
        }

        var s = settings.gccIncludePaths;
        s = s.trim();
        if (s.length != 0) {
          tempargs = s.split(",");
          tempargs.forEach(function (entry) {
            entry = entry.trim();
            if (entry.length != 0) {
              if (entry.substring(0, 1) == ".") {
                entry = path.join(cwd, entry);
              }
              item = "-I" + entry;
              args.push(item);
            }
          });
        }

        args.push(file);

        full_command = "linter-gcc: " + command;
        args.forEach(function (entry) {
          full_command = full_command + " " + entry;
        });

        console.log(full_command);
        return helpers.exec(command, args, { stream: "stderr" }).then(function (output) {
          messages = helpers.parse(output, regex);
          var searchString = "error";
          var error_pos = output.indexOf(searchString);
          if (messages.length == 0) {
            if (error_pos != -1) {
              messages.push({
                type: "error",
                text: output.substring(error_pos, output.length - 1)
              });
            }
          }
          return messages;
        });
      }
    };
  }
};
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3ZpY3Rvci8uYXRvbS9wYWNrYWdlcy9saW50ZXItZ2NjL2xpYi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7cUJBRUc7QUFDYixRQUFNLEVBQUU7QUFDTixZQUFRLEVBQUU7QUFDUixXQUFLLEVBQUUscUJBQXFCO0FBQzVCLGlCQUFXLEVBQUUsNExBQTRMO0FBQ3pNLFVBQUksRUFBRSxRQUFRO0FBQ2QsaUJBQVMsY0FBYztLQUN4QjtBQUNELG1CQUFlLEVBQUU7QUFDZixXQUFLLEVBQUUsbUJBQW1CO0FBQzFCLGlCQUFXLEVBQUUsa09BQWtPO0FBQy9PLFVBQUksRUFBRSxRQUFRO0FBQ2QsaUJBQVMsR0FBRztLQUNiO0FBQ0QsdUJBQW1CLEVBQUU7QUFDbkIsV0FBSyxFQUFFLHVCQUF1QjtBQUM5QixVQUFJLEVBQUUsU0FBUztBQUNmLGlCQUFTLEtBQUs7S0FDZjtBQUNELG9CQUFnQixFQUFFO0FBQ2hCLFdBQUssRUFBRSxTQUFTO0FBQ2hCLFVBQUksRUFBRSxRQUFRO0FBQ2QsaUJBQVMsT0FBTztLQUNqQjtBQUNELHNCQUFrQixFQUFFO0FBQ2xCLFdBQUssRUFBRSxXQUFXO0FBQ2xCLFVBQUksRUFBRSxRQUFRO0FBQ2QsaUJBQVMsa0JBQWtCO0tBQzVCO0FBQ0QsaUJBQWEsRUFBRTtBQUNiLFdBQUssRUFBRSxpQkFBaUI7QUFDeEIsVUFBSSxFQUFFLFNBQVM7QUFDZixpQkFBUyxDQUFDO0tBQ1g7R0FDRjs7QUFFRCxVQUFRLEVBQUUsb0JBQU07QUFDZCxRQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUM3QyxVQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FDekIsMkJBQTJCLEVBQzNCO0FBQ0UsY0FBTSxFQUFFLDREQUE0RDtPQUNyRSxDQUNGLENBQUM7S0FDSDtBQUNELFdBQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZ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QUFHLENBQUMsQ0FBQztlQUN2RCxDQUFDLENBQUM7YUFDTjtXQUNKO0FBQ0QsaUJBQU8sUUFBUSxDQUFDO1NBQ25CLENBQ0YsQ0FBQztPQUNIO0tBQ0YsQ0FBQztHQUNIO0NBQ0YiLCJmaWxlIjoiL2hvbWUvdmljdG9yLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1nY2MvbGliL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBiYWJlbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbmZpZzoge1xuICAgIGV4ZWNQYXRoOiB7XG4gICAgICB0aXRsZTogXCJHQ0MgRXhlY3V0YWJsZSBQYXRoXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJOb3RlIGZvciBXaW5kb3dzL01hYyBPU1ggdXNlcnM6IHBsZWFzZSBlbnN1cmUgdGhhdCBHQ0MgaXMgaW4geW91ciBgYGAkUEFUSGBgYCBvdGhlcndpc2UgdGhlIGxpbnRlciBtaWdodCBub3Qgd29yay4gSWYgeW91ciBwYXRoIGNvbnRhaW5zIHNwYWNlcywgaXQgbmVlZHMgdG8gYmUgZW5jbG9zZWQgaW4gZG91YmxlIHF1b3Rlcy5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBkZWZhdWx0OiBcIi91c3IvYmluL2crK1wiXG4gICAgfSxcbiAgICBnY2NJbmNsdWRlUGF0aHM6IHtcbiAgICAgIHRpdGxlOiBcIkdDQyBJbmNsdWRlIFBhdGhzXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJFbnRlciB5b3VyIGluY2x1ZGUgcGF0aHMgYXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdC4gUGF0aHMgc3RhcnRpbmcgd2l0aCBgYGAuYGBgIG9yIGBgYC4uYGBgIGFyZSBleHBhbmRlZCByZWxhdGl2ZSB0byB0aGUgcHJvamVjdCByb290L2ZpbGUgcGF0aC4gSWYgYW55IG9mIHlvdXIgcGF0aHMgY29udGFpbiBzcGFjZXMsIHRoZXkgbmVlZCB0byBiZSBlbmNsb3NlZCBpbiBkb3VibGUgcXVvdGVzLlwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGRlZmF1bHQ6IFwiIFwiXG4gICAgfSxcbiAgICBnY2NTdXBwcmVzc1dhcm5pbmdzOiB7XG4gICAgICB0aXRsZTogXCJTdXBwcmVzcyBHQ0MgV2FybmluZ3NcIixcbiAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGdjY0RlZmF1bHRDRmxhZ3M6IHtcbiAgICAgIHRpdGxlOiBcIkMgRmxhZ3NcIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBkZWZhdWx0OiBcIi1XYWxsXCJcbiAgICB9LFxuICAgIGdjY0RlZmF1bHRDcHBGbGFnczoge1xuICAgICAgdGl0bGU6IFwiQysrIEZsYWdzXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZGVmYXVsdDogXCItV2FsbCAtc3RkPWMrKzExXCJcbiAgICB9LFxuICAgIGdjY0Vycm9yTGltaXQ6IHtcbiAgICAgIHRpdGxlOiBcIkdDQyBFcnJvciBMaW1pdFwiLFxuICAgICAgdHlwZTogXCJpbnRlZ2VyXCIsXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfVxuICB9LFxuXG4gIGFjdGl2YXRlOiAoKSA9PiB7XG4gICAgaWYoIWF0b20ucGFja2FnZXMuZ2V0TG9hZGVkUGFja2FnZXMoXCJsaW50ZXJcIikpIHtcbiAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihcbiAgICAgICAgXCJMaW50ZXIgcGFja2FnZSBub3QgZm91bmQuXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBkZXRhaWw6IFwiUGxlYXNlIGluc3RhbGwgdGhlIGBsaW50ZXJgIHBhY2thZ2UgaW4geW91ciBTZXR0aW5ncyB2aWV3LlwiXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICAgIHJlcXVpcmUoXCJhdG9tLXBhY2thZ2UtZGVwc1wiKS5pbnN0YWxsKFwibGludGVyLWdjY1wiKTtcbiAgfSxcblxuICBwcm92aWRlTGludGVyOiAoKSA9PiB7XG4gICAgY29uc3QgaGVscGVycyA9IHJlcXVpcmUoXCJhdG9tLWxpbnRlclwiKTtcbiAgICBjb25zdCByZWdleCA9IFwiKD88ZmlsZT4uKyk6KD88bGluZT5cXFxcZCspOig/PGNvbD5cXFxcZCspOlxcXFxzKlxcXFx3KlxcXFxzKig/PHR5cGU+KGVycm9yfHdhcm5pbmd8bm90ZSkpOlxcXFxzKig/PG1lc3NhZ2U+LiopXCI7XG5cbiAgICAvLyBSZWFkIGNvbmZpZ3VyYXRpb24gZGF0YSBmcm9tIEpTT04gZmlsZSAuZ2NjLWNvbmZpZy5qc29uXG4gICAgLy8gaW4gcHJvamVjdCByb290XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiR0NDXCIsXG4gICAgICBncmFtbWFyU2NvcGVzOiBbXCJzb3VyY2UuY1wiLCBcInNvdXJjZS5jcHBcIl0sXG4gICAgICBzY29wZTogXCJmaWxlXCIsXG4gICAgICBsaW50T25GbHk6IGZhbHNlLFxuICAgICAgbGludDogKGFjdGl2ZUVkaXRvcikgPT4ge1xuICAgICAgICBjb25maWcgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG4gICAgICAgIHZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuICAgICAgICBzZXR0aW5ncyA9IGNvbmZpZy5zZXR0aW5ncygpO1xuICAgICAgICB2YXIgZmlsZSA9IGFjdGl2ZUVkaXRvci5nZXRQYXRoKCk7XG4gICAgICAgIHZhciBjd2QgPSBhdG9tLnByb2plY3QuZ2V0UGF0aHMoKVswXVxuICAgICAgICBpZiAoIWN3ZCkge1xuICAgICAgICAgICAgZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlUGFuZUl0ZW0oKTtcbiAgICAgICAgICAgIGlmIChlZGl0b3IpIHtcbiAgICAgICAgICAgICAgICBmaWxlID0gZWRpdG9yLmJ1ZmZlci5maWxlO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN3ZCA9IGZpbGUuZ2V0UGFyZW50KCkuZ2V0UGF0aCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb21tYW5kID0gc2V0dGluZ3MuZXhlY1BhdGg7XG5cbiAgICAgICAgLy8gRXhwYW5kIHBhdGggaWYgbmVjZXNzYXJ5XG4gICAgICAgIGlmIChjb21tYW5kLnN1YnN0cmluZygwLDEpID09IFwiLlwiKSB7XG4gICAgICAgICAgICBjb21tYW5kID0gcGF0aC5qb2luKGN3ZCwgY29tbWFuZCk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmdzID0gW107XG5cbiAgICAgICAgaWYoYWN0aXZlRWRpdG9yLmdldEdyYW1tYXIoKS5uYW1lID09PSBcIkMrK1wiKSB7XG4gICAgICAgICAgcyA9IHNldHRpbmdzLmdjY0RlZmF1bHRDcHBGbGFncztcbiAgICAgICAgICB0ZW1wYXJncyA9IHMuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdCh0ZW1wYXJncyk7XG4gICAgICAgICB9IGVsc2UgaWYoYWN0aXZlRWRpdG9yLmdldEdyYW1tYXIoKS5uYW1lID09PSBcIkNcIikge1xuICAgICAgICAgIHMgPSBzZXR0aW5ncy5nY2NEZWZhdWx0Q0ZsYWdzO1xuICAgICAgICAgIHRlbXBhcmdzID0gcy5zcGxpdChcIiBcIik7XG4gICAgICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KHRlbXBhcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFyZ3MucHVzaChgLWZtYXgtZXJyb3JzPSR7c2V0dGluZ3MuZ2NjRXJyb3JMaW1pdH1gKTtcbiAgICAgICAgaWYoc2V0dGluZ3MuZ2NjU3VwcHJlc3NXYXJuaW5ncykge1xuICAgICAgICAgIGFyZ3MucHVzaChcIi13XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHMgPSBzZXR0aW5ncy5nY2NJbmNsdWRlUGF0aHM7XG4gICAgICAgIHMgPSBzLnRyaW0oKTtcbiAgICAgICAgaWYgKHMubGVuZ3RoICE9ICAwKSB7XG4gICAgICAgICAgICB0ZW1wYXJncyA9IHMuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgdGVtcGFyZ3MuZm9yRWFjaChmdW5jdGlvbihlbnRyeSkge1xuICAgICAgICAgICAgICAgIGVudHJ5ID0gZW50cnkudHJpbSgpO1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeS5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuc3Vic3RyaW5nKDAsMSkgPT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5ID0gcGF0aC5qb2luKGN3ZCwgZW50cnkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBcIi1JXCIgKyBlbnRyeTtcbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYXJncy5wdXNoKGZpbGUpO1xuXG4gICAgICAgIGZ1bGxfY29tbWFuZCA9IFwibGludGVyLWdjYzogXCIgKyBjb21tYW5kO1xuICAgICAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24oZW50cnkpe1xuICAgICAgICAgICAgZnVsbF9jb21tYW5kID0gZnVsbF9jb21tYW5kICsgXCIgXCIgKyBlbnRyeTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coZnVsbF9jb21tYW5kKTtcbiAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXhlYyhjb21tYW5kLCBhcmdzLCB7c3RyZWFtOiBcInN0ZGVyclwifSkudGhlbihvdXRwdXQgPT5cbiAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2VzID0gaGVscGVycy5wYXJzZShvdXRwdXQsIHJlZ2V4KTtcbiAgICAgICAgICAgICAgdmFyIHNlYXJjaFN0cmluZyA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgICAgdmFyIGVycm9yX3BvcyA9IG91dHB1dC5pbmRleE9mKHNlYXJjaFN0cmluZyk7XG4gICAgICAgICAgICAgIGlmIChtZXNzYWdlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGVycm9yX3BvcyAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG91dHB1dC5zdWJzdHJpbmcoZXJyb3JfcG9zLCBvdXRwdXQubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZXM7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG4iXX0=
//# sourceURL=/home/victor/.atom/packages/linter-gcc/lib/main.js
